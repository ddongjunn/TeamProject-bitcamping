-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- member Table Create SQL
CREATE TABLE member
(
    id             VARCHAR2(100)    NOT NULL,
    username       VARCHAR2(50)     NOT NULL,
    password       VARCHAR2(100)    NULL,
    nickname       VARCHAR2(20)     NOT NULL,
    phone          VARCHAR2(50)     NOT NULL,
    email          VARCHAR2(50)     NOT NULL,
    create_date    DATE             NOT NULL,
    sns_type       VARCHAR2(50)     NULL,
    auth           NUMBER(1)        NOT NULL,
    CONSTRAINT PK_member PRIMARY KEY (id)
)
/

COMMENT ON TABLE member IS '회원'
/

COMMENT ON COLUMN member.id IS '아이디( 일반 : 아이디, sns : 토큰 )'
/

COMMENT ON COLUMN member.username IS '이름'
/

COMMENT ON COLUMN member.password IS '비밀번호'
/

COMMENT ON COLUMN member.nickname IS '닉네임'
/

COMMENT ON COLUMN member.phone IS '휴대전화'
/

COMMENT ON COLUMN member.email IS '이메일'
/

COMMENT ON COLUMN member.create_date IS '가입일'
/

COMMENT ON COLUMN member.sns_type IS 'sns타입'
/

COMMENT ON COLUMN member.auth IS '권한'
/


-- CAMPING_LIST Table Create SQL
CREATE TABLE CAMPING_LIST
(
    CONTENTID        NUMBER(38)        NOT NULL,
    FACLTNM          VARCHAR2(100)     NOT NULL,
    DONM             VARCHAR2(50)      NOT NULL,
    SIGUNGUNM        VARCHAR2(50)      NOT NULL,
    ADDR1            VARCHAR2(200)     NOT NULL,
    ADDR2            VARCHAR2(100)     NOT NULL,
    TEL              VARCHAR2(26)      NOT NULL,
    LINEINTRO        VARCHAR2(4000)    NOT NULL,
    FACLTDIVNM       VARCHAR2(26)      NOT NULL,
    INDUTY           VARCAHR2(100)     NOT NULL,
    HOMEPAGE         VARCHAR2(4000)    NOT NULL,
    LCTCL            VARCHAR2(50)      NOT NULL,
    SITEBOTTOMCL1    NUMBER(38)        NOT NULL,
    SITEBOTTOMCL2    NUMBER(38)        NOT NULL,
    SITEBOTTOMCL3    NUMBER(38)        NOT NULL,
    SITEBOTTOMCL4    NUMBER(38)        NOT NULL,
    SITEBOTTOMCL5    NUMBER(38)        NOT NULL,
    RESVECL          VARCHAR2(100)     NOT NULL,
    SBRSCL           VARCHAR2(128)     NOT NULL,
    EQPMNLENDCL      VARCHAR2(100)     NOT NULL,
    EXPRNPROGRM      VARCHAR2(4000)    NOT NULL,
    ANIMALCMGCL      VARCHAR2(26)      NOT NULL,
    FIRSTIMGURL      VARCHAR2(4000)    NOT NULL,
    CREATEDTIME      DATE              NOT NULL,
    MODIFIEDTIME     DATE              NOT NULL,
    READCOUNT        NUMBER(8)         NOT NULL,
    LIKECOUNT        NUMBER(8)         NOT NULL,
    CONSTRAINT PK_CAMPING_LIST PRIMARY KEY (CONTENTID)
)
/

COMMENT ON TABLE CAMPING_LIST IS '지역별 캠핑장 리스트'
/

COMMENT ON COLUMN CAMPING_LIST.CONTENTID IS '캠핑장 고유번호'
/

COMMENT ON COLUMN CAMPING_LIST.FACLTNM IS '캠핑장 시설 이름'
/

COMMENT ON COLUMN CAMPING_LIST.DONM IS '도/광역시 이름'
/

COMMENT ON COLUMN CAMPING_LIST.SIGUNGUNM IS '시군구 이름'
/

COMMENT ON COLUMN CAMPING_LIST.ADDR1 IS '주소1'
/

COMMENT ON COLUMN CAMPING_LIST.ADDR2 IS '주소2'
/

COMMENT ON COLUMN CAMPING_LIST.TEL IS '전화번호'
/

COMMENT ON COLUMN CAMPING_LIST.LINEINTRO IS '한 줄 소개'
/

COMMENT ON COLUMN CAMPING_LIST.FACLTDIVNM IS '캠핑장 운영 주체'
/

COMMENT ON COLUMN CAMPING_LIST.INDUTY IS '캠핑장 분류'
/

COMMENT ON COLUMN CAMPING_LIST.HOMEPAGE IS '홈페이지 주소'
/

COMMENT ON COLUMN CAMPING_LIST.LCTCL IS '캠핑장 주변환경'
/

COMMENT ON COLUMN CAMPING_LIST.SITEBOTTOMCL1 IS '캠핑장 바닥(잔디)'
/

COMMENT ON COLUMN CAMPING_LIST.SITEBOTTOMCL2 IS '캠핑장 바닥(파쇄석)'
/

COMMENT ON COLUMN CAMPING_LIST.SITEBOTTOMCL3 IS '캠핑장 바닥(테크)'
/

COMMENT ON COLUMN CAMPING_LIST.SITEBOTTOMCL4 IS '캠핑장 바닥(자갈)'
/

COMMENT ON COLUMN CAMPING_LIST.SITEBOTTOMCL5 IS '캠핑장 바닥(맨흙)'
/

COMMENT ON COLUMN CAMPING_LIST.RESVECL IS '예약방식'
/

COMMENT ON COLUMN CAMPING_LIST.SBRSCL IS '부대시설'
/

COMMENT ON COLUMN CAMPING_LIST.EQPMNLENDCL IS '캠핑 장비 대여 여부'
/

COMMENT ON COLUMN CAMPING_LIST.EXPRNPROGRM IS '체험 프로그램'
/

COMMENT ON COLUMN CAMPING_LIST.ANIMALCMGCL IS '애완동물 가능 여부'
/

COMMENT ON COLUMN CAMPING_LIST.FIRSTIMGURL IS '메인 이미지'
/

COMMENT ON COLUMN CAMPING_LIST.CREATEDTIME IS '최초 작성일'
/

COMMENT ON COLUMN CAMPING_LIST.MODIFIEDTIME IS '최종 수정일'
/

COMMENT ON COLUMN CAMPING_LIST.READCOUNT IS '조회수(추후 ADD로 추가)'
/

COMMENT ON COLUMN CAMPING_LIST.LIKECOUNT IS '추천수(추후 ADD로 추가)'
/


-- PRODUCT Table Create SQL
CREATE TABLE PRODUCT
(
    PRODUCT_SEQ       NUMBER(8)         NOT NULL,
    PRODUCT_NAME      VARCHAR2(500)     NOT NULL,
    PRODUCT_DESC      VARCHAR2(1000)    NOT NULL,
    BASE_ITEM         VARCHAR2(1000)    NOT NULL,
    PRODUCT_PRICE     NUMBER(8)         NOT NULL,
    PRODUCT_STOCK     NUMBER(8)         NOT NULL,
    THUMBNAIL_NAME    VARCHAR2(1000)    NULL,
    CONTENT           VARCHAR2(2000)    NULL,
    INCLUDE_LIGHT     NUMBER(1)         NOT NULL,
    INCLUDE_GRILL     NUMBER(1)         NOT NULL,
    RENT_TYPE         NUMBER(8)         NOT NULL,
    WDATE             DATE              NOT NULL,
    DEL               NUMBER(1)         NOT NULL,
    CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_SEQ)
)
/

CREATE SEQUENCE PRODUCT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PRODUCT_AI_TRG
BEFORE INSERT ON PRODUCT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT PRODUCT_SEQ.NEXTVAL
    INTO :NEW.PRODUCT_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER PRODUCT_AI_TRG;
/

--DROP SEQUENCE PRODUCT_SEQ;
/

COMMENT ON TABLE PRODUCT IS '상품 정보'
/

COMMENT ON COLUMN PRODUCT.PRODUCT_SEQ IS '상품 SEQ'
/

COMMENT ON COLUMN PRODUCT.PRODUCT_NAME IS '상품 이름'
/

COMMENT ON COLUMN PRODUCT.PRODUCT_DESC IS '상품 한줄 설명'
/

COMMENT ON COLUMN PRODUCT.BASE_ITEM IS '기본 구성 상품명'
/

COMMENT ON COLUMN PRODUCT.PRODUCT_PRICE IS '상품 가격'
/

COMMENT ON COLUMN PRODUCT.PRODUCT_STOCK IS '상품 재고'
/

COMMENT ON COLUMN PRODUCT.THUMBNAIL_NAME IS '썸네일 이미지 파일명'
/

COMMENT ON COLUMN PRODUCT.CONTENT IS '상품 상세 설명'
/

COMMENT ON COLUMN PRODUCT.INCLUDE_LIGHT IS '조명 옵션 포함 여부'
/

COMMENT ON COLUMN PRODUCT.INCLUDE_GRILL IS '화로 옵션 포함 여부'
/

COMMENT ON COLUMN PRODUCT.RENT_TYPE IS '대여료 유형'
/

COMMENT ON COLUMN PRODUCT.WDATE IS '상품 등록일'
/

COMMENT ON COLUMN PRODUCT.DEL IS '상품 삭제'
/


-- PRODUCT_OPTION Table Create SQL
CREATE TABLE PRODUCT_OPTION
(
    OPTION_SEQ          NUMBER(8)        NOT NULL,
    OPTION_TYPE         NUMBER(8)        NOT NULL,
    OPTION_TYPE_NAME    VARCHAR2(120)    NOT NULL,
    OPTION_NAME         VARCHAR2(120)    NOT NULL,
    OPTION_PRICE        NUMBER(8)        NOT NULL,
    OPTION_STOCK        NUMBER(8)        NOT NULL,
    CONSTRAINT PK_OPTION PRIMARY KEY (OPTION_SEQ)
)
/

CREATE SEQUENCE PRODUCT_OPTION_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PRODUCT_OPTION_AI_TRG
BEFORE INSERT ON PRODUCT_OPTION
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT PRODUCT_OPTION_SEQ.NEXTVAL
    INTO :NEW.OPTION_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER PRODUCT_OPTION_AI_TRG;
/

--DROP SEQUENCE PRODUCT_OPTION_SEQ;
/

COMMENT ON TABLE PRODUCT_OPTION IS '추가 옵션 상품 정보'
/

COMMENT ON COLUMN PRODUCT_OPTION.OPTION_SEQ IS '옵션 SEQ'
/

COMMENT ON COLUMN PRODUCT_OPTION.OPTION_TYPE IS '옵션 카테고리 번호'
/

COMMENT ON COLUMN PRODUCT_OPTION.OPTION_TYPE_NAME IS '옵션 카테고리명'
/

COMMENT ON COLUMN PRODUCT_OPTION.OPTION_NAME IS '옵션 이름'
/

COMMENT ON COLUMN PRODUCT_OPTION.OPTION_PRICE IS '옵션 가격'
/

COMMENT ON COLUMN PRODUCT_OPTION.OPTION_STOCK IS '옵션 재고'
/


-- PRODUCT_RENT Table Create SQL
CREATE TABLE PRODUCT_RENT
(
    RENT_SEQ      NUMBER(8)        NOT NULL,
    RENT_TYPE     NUMBER(8)        NOT NULL,
    RENT_NAME     VARCHAR2(200)    NOT NULL,
    RENT_PRICE    NUMBER(8)        NOT NULL,
    RENT_DAYS     NUMBER(8)        NOT NULL,
    CONSTRAINT PK_RENT PRIMARY KEY (RENT_SEQ)
)
/

CREATE SEQUENCE PRODUCT_RENT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PRODUCT_RENT_AI_TRG
BEFORE INSERT ON PRODUCT_RENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT PRODUCT_RENT_SEQ.NEXTVAL
    INTO :NEW.RENT_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER PRODUCT_RENT_AI_TRG;
/

--DROP SEQUENCE PRODUCT_RENT_SEQ;
/

COMMENT ON TABLE PRODUCT_RENT IS '대여료'
/

COMMENT ON COLUMN PRODUCT_RENT.RENT_SEQ IS '대여 SEQ'
/

COMMENT ON COLUMN PRODUCT_RENT.RENT_TYPE IS '대여료 유형'
/

COMMENT ON COLUMN PRODUCT_RENT.RENT_NAME IS '대여 옵션명'
/

COMMENT ON COLUMN PRODUCT_RENT.RENT_PRICE IS '대여료'
/

COMMENT ON COLUMN PRODUCT_RENT.RENT_DAYS IS '대여일수'
/


-- CAMPING_BBS Table Create SQL
CREATE TABLE CAMPING_BBS
(
    REVIEW_SEQ      NUMBER(8)         NOT NULL,
    CONTENTID       NUMBER(38)        NOT NULL,
    TITLE           VARCHAR2(1000)    NOT NULL,
    CONTENT         VARCHAR2(4000)    NOT NULL,
    WDATE           DATE              NOT NULL,
    READCOUNT       NUMBER(8)         NOT NULL,
    USER_ID         VARCHAR2(100)     NOT NULL,
    REVISIT         NUMBER(8)         NOT NULL,
    LIKE_COUNT      NUMBER(8)         NOT NULL,
    DEL             NUMBER(8)         NOT NULL,
    NICKNAME        VARCHAR2(20)      NOT NULL,
    COMMENTCOUNT    NUMBER(8)         NOT NULL,
    CONSTRAINT PK_CAMPINGBBS PRIMARY KEY (REVIEW_SEQ)
)
/

CREATE SEQUENCE CAMPING_BBS_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER CAMPING_BBS_AI_TRG
BEFORE INSERT ON CAMPING_BBS
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT CAMPING_BBS_SEQ.NEXTVAL
    INTO :NEW.REVIEW_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER CAMPING_BBS_AI_TRG;
/

--DROP SEQUENCE CAMPING_BBS_SEQ;
/

COMMENT ON TABLE CAMPING_BBS IS '캠핑후기게시판'
/

COMMENT ON COLUMN CAMPING_BBS.REVIEW_SEQ IS '리뷰 시퀀스'
/

COMMENT ON COLUMN CAMPING_BBS.CONTENTID IS '캠핑장 고유번호'
/

COMMENT ON COLUMN CAMPING_BBS.TITLE IS '제목'
/

COMMENT ON COLUMN CAMPING_BBS.CONTENT IS '내용'
/

COMMENT ON COLUMN CAMPING_BBS.WDATE IS '작성일'
/

COMMENT ON COLUMN CAMPING_BBS.READCOUNT IS '조회수'
/

COMMENT ON COLUMN CAMPING_BBS.USER_ID IS '작성자 ID'
/

COMMENT ON COLUMN CAMPING_BBS.REVISIT IS '재방문의사'
/

COMMENT ON COLUMN CAMPING_BBS.LIKE_COUNT IS '좋아요'
/

COMMENT ON COLUMN CAMPING_BBS.DEL IS '삭제'
/

COMMENT ON COLUMN CAMPING_BBS.NICKNAME IS '닉네임'
/

COMMENT ON COLUMN CAMPING_BBS.COMMENTCOUNT IS '댓글 갯수'
/

ALTER TABLE CAMPING_BBS
    ADD CONSTRAINT FK_CAMPING_BBS_USER_ID_member_ FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/

ALTER TABLE CAMPING_BBS
    ADD CONSTRAINT FK_CAMPING_BBS_CONTENTID_CAMPI FOREIGN KEY (CONTENTID)
        REFERENCES CAMPING_LIST (CONTENTID)
/


-- COMMUNITY_BBS Table Create SQL
CREATE TABLE COMMUNITY_BBS
(
    COMMUNITY_SEQ    NUMBER(8)         NOT NULL,
    USER_ID          VARCHAR2(100)     NOT NULL,
    TITLE            VARCHAR2(2000)    NOT NULL,
    WDATE            DATE              NOT NULL,
    CONTENT          VARCHAR2(4000)    NOT NULL,
    READCOUNT        NUMBER(8)         NOT NULL,
    LIKECOUNT        NUMBER(8)         NOT NULL,
    DEL              NUMBER(1)         NOT NULL,
    bbstype          VARCHAR2(50)      NOT NULL,
    CONSTRAINT PK_ PRIMARY KEY (COMMUNITY_SEQ)
)
/

CREATE SEQUENCE COMMUNITY_BBS_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER COMMUNITY_BBS_AI_TRG
BEFORE INSERT ON COMMUNITY_BBS
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT COMMUNITY_BBS_SEQ.NEXTVAL
    INTO :NEW.COMMUNITY_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER COMMUNITY_BBS_AI_TRG;
/

--DROP SEQUENCE COMMUNITY_BBS_SEQ;
/

COMMENT ON TABLE COMMUNITY_BBS IS '자유게시판'
/

COMMENT ON COLUMN COMMUNITY_BBS.COMMUNITY_SEQ IS '글 번호'
/

COMMENT ON COLUMN COMMUNITY_BBS.USER_ID IS '작성자 ID'
/

COMMENT ON COLUMN COMMUNITY_BBS.TITLE IS '제목'
/

COMMENT ON COLUMN COMMUNITY_BBS.WDATE IS '작성일자'
/

COMMENT ON COLUMN COMMUNITY_BBS.CONTENT IS '내용'
/

COMMENT ON COLUMN COMMUNITY_BBS.READCOUNT IS '조회수'
/

COMMENT ON COLUMN COMMUNITY_BBS.LIKECOUNT IS '좋아요'
/

COMMENT ON COLUMN COMMUNITY_BBS.DEL IS '삭제'
/

COMMENT ON COLUMN COMMUNITY_BBS.bbstype IS '구분(자유게시판, 캠핑후기, 가입인사, 캠퍼구인, 삽니다, 팝니다)'
/

ALTER TABLE COMMUNITY_BBS
    ADD CONSTRAINT FK_COMMUNITY_BBS_USER_ID_membe FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/


-- PRODUCT_ORDER Table Create SQL
CREATE TABLE PRODUCT_ORDER
(
    ORDER_SEQ         NUMBER(8)         NOT NULL,
    USER_ID           VARCHAR2(100)     NOT NULL,
    ORDER_DATE        DATE              NOT NULL,
    PRODUCT_SEQ       NUMBER(8)         NOT NULL,
    OPTION1_SEQ       NUMBER(8)         NULL,
    OPTION2_SEQ       NUMBER(8)         NULL,
    QUANTITY          NUMBER(8)         NOT NULL,
    RENT_SEQ          NUMBER(8)         NOT NULL,
    RENT_SDATE        VARCHAR2(100)     NOT NULL,
    RENT_EDATE        VARCHAR2(100)     NOT NULL,
    PRODUCT_PRICE     NUMBER(8)         NOT NULL,
    SHIPPING_FEE      NUMBER(8)         NOT NULL,
    TOTAL_PRICE       NUMBER(8)         NOT NULL,
    RECEIVER          VARCHAR2(20)      NOT NULL,
    ADDRESS           VARCHAR2(2000)    NOT NULL,
    RECEIVER_PHONE    VARCHAR2(100)     NOT NULL,
    MEMO              VARCHAR2(1000)    NULL,
    PAYMENT           VARCHAR2(100)     NOT NULL,
    MERCHANT_UID      VARCHAR2(100)     NOT NULL,
    ORDER_STATUS      NUMBER(1)         NOT NULL,
    REVIEW_STATUS     NUMBER(1)         NOT NULL,
    INVOICE_NUMBER    VARCHAR2(100)     NULL,
    CONSTRAINT PK_ORDER PRIMARY KEY (ORDER_SEQ)
)
/

CREATE SEQUENCE PRODUCT_ORDER_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PRODUCT_ORDER_AI_TRG
BEFORE INSERT ON PRODUCT_ORDER
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT PRODUCT_ORDER_SEQ.NEXTVAL
    INTO :NEW.ORDER_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER PRODUCT_ORDER_AI_TRG;
/

--DROP SEQUENCE PRODUCT_ORDER_SEQ;
/

COMMENT ON TABLE PRODUCT_ORDER IS '상품 주문 정보'
/

COMMENT ON COLUMN PRODUCT_ORDER.ORDER_SEQ IS '주문 SEQ'
/

COMMENT ON COLUMN PRODUCT_ORDER.USER_ID IS '회원 ID'
/

COMMENT ON COLUMN PRODUCT_ORDER.ORDER_DATE IS '주문일시'
/

COMMENT ON COLUMN PRODUCT_ORDER.PRODUCT_SEQ IS '상품 SEQ'
/

COMMENT ON COLUMN PRODUCT_ORDER.OPTION1_SEQ IS '옵션 1 SEQ'
/

COMMENT ON COLUMN PRODUCT_ORDER.OPTION2_SEQ IS '옵션 2 SEQ'
/

COMMENT ON COLUMN PRODUCT_ORDER.QUANTITY IS '수량'
/

COMMENT ON COLUMN PRODUCT_ORDER.RENT_SEQ IS '대여 SEQ'
/

COMMENT ON COLUMN PRODUCT_ORDER.RENT_SDATE IS '대여 시작일'
/

COMMENT ON COLUMN PRODUCT_ORDER.RENT_EDATE IS '대여 종료일'
/

COMMENT ON COLUMN PRODUCT_ORDER.PRODUCT_PRICE IS '상품금액'
/

COMMENT ON COLUMN PRODUCT_ORDER.SHIPPING_FEE IS '배송비'
/

COMMENT ON COLUMN PRODUCT_ORDER.TOTAL_PRICE IS '총주문금액'
/

COMMENT ON COLUMN PRODUCT_ORDER.RECEIVER IS '수령인'
/

COMMENT ON COLUMN PRODUCT_ORDER.ADDRESS IS '배송지'
/

COMMENT ON COLUMN PRODUCT_ORDER.RECEIVER_PHONE IS '연락처'
/

COMMENT ON COLUMN PRODUCT_ORDER.MEMO IS '배송요청사항'
/

COMMENT ON COLUMN PRODUCT_ORDER.PAYMENT IS '결제수단'
/

COMMENT ON COLUMN PRODUCT_ORDER.MERCHANT_UID IS '결제 ID(Iamport 고유 id)'
/

COMMENT ON COLUMN PRODUCT_ORDER.ORDER_STATUS IS '주문 상태'
/

COMMENT ON COLUMN PRODUCT_ORDER.REVIEW_STATUS IS '리뷰 상태'
/

COMMENT ON COLUMN PRODUCT_ORDER.INVOICE_NUMBER IS '송장번호'
/

ALTER TABLE PRODUCT_ORDER
    ADD CONSTRAINT FK_PRODUCT_ORDER_PRODUCT_SEQ_P FOREIGN KEY (PRODUCT_SEQ)
        REFERENCES PRODUCT (PRODUCT_SEQ)
/

ALTER TABLE PRODUCT_ORDER
    ADD CONSTRAINT FK_PRODUCT_ORDER_RENT_SEQ_PROD FOREIGN KEY (RENT_SEQ)
        REFERENCES PRODUCT_RENT (RENT_SEQ)
/

ALTER TABLE PRODUCT_ORDER
    ADD CONSTRAINT FK_PRODUCT_ORDER_USER_ID_membe FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/

ALTER TABLE PRODUCT_ORDER
    ADD CONSTRAINT FK_PRODUCT_ORDER_OPTION1_SEQ_P FOREIGN KEY (OPTION1_SEQ)
        REFERENCES PRODUCT_OPTION (OPTION_SEQ)
/

ALTER TABLE PRODUCT_ORDER
    ADD CONSTRAINT FK_PRODUCT_ORDER_OPTION2_SEQ_P FOREIGN KEY (OPTION2_SEQ)
        REFERENCES PRODUCT_OPTION (OPTION_SEQ)
/


-- NOTICE Table Create SQL
CREATE TABLE NOTICE
(
    notice_seq     NUMBER(8)         NOT NULL,
    user_id        VARCHAR2(100)     NOT NULL,
    title          VARCHAR2(2000)    NOT NULL,
    content        VARCHAR2(4000)    NOT NULL,
    filename       VARCHAR2(1000)    NULL,
    newfilename    VARCHAR2(1000)    NULL,
    wdate          DATE              NOT NULL,
    readcount      NUMBER(8)         NOT NULL,
    downcount      NUMBER(8)         NOT NULL,
    del            NUMBER(1)         NOT NULL,
    CONSTRAINT PK_NOTICE PRIMARY KEY (notice_seq)
)
/

CREATE SEQUENCE NOTICE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER NOTICE_AI_TRG
BEFORE INSERT ON NOTICE
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT NOTICE_SEQ.NEXTVAL
    INTO :NEW.notice_seq
    FROM DUAL;
END;
/

--DROP TRIGGER NOTICE_AI_TRG;
/

--DROP SEQUENCE NOTICE_SEQ;
/

COMMENT ON TABLE NOTICE IS '공지사항'
/

COMMENT ON COLUMN NOTICE.notice_seq IS '공지사항 SEQ'
/

COMMENT ON COLUMN NOTICE.user_id IS '작성자 ID'
/

COMMENT ON COLUMN NOTICE.title IS '공지사항 제목'
/

COMMENT ON COLUMN NOTICE.content IS '공지사항 내용'
/

COMMENT ON COLUMN NOTICE.filename IS '첨부파일명'
/

COMMENT ON COLUMN NOTICE.newfilename IS '첨부파일명(변환)'
/

COMMENT ON COLUMN NOTICE.wdate IS '작성일'
/

COMMENT ON COLUMN NOTICE.readcount IS '조회수'
/

COMMENT ON COLUMN NOTICE.downcount IS '다운로드수'
/

COMMENT ON COLUMN NOTICE.del IS '삭제'
/

ALTER TABLE NOTICE
    ADD CONSTRAINT FK_NOTICE_user_id_member_id FOREIGN KEY (user_id)
        REFERENCES member (id)
/


-- PRODUCT_REVIEW Table Create SQL
CREATE TABLE PRODUCT_REVIEW
(
    REVIEW_SEQ     NUMBER(8)         NOT NULL,
    PRODUCT_SEQ    NUMBER(8)         NOT NULL,
    USER_ID        VARCHAR2(100)     NOT NULL,
    ORDER_SEQ      NUMBER(8)         NOT NULL,
    TITLE          VARCHAR2(2000)    NOT NULL,
    CONTENT        VARCHAR2(3000)    NOT NULL,
    IMAGE          VARCHAR2(1000)    NULL,
    RATE           NUMBER(1)         NOT NULL,
    WDATE          DATE              NOT NULL,
    DEL            NUMBER(1)         NOT NULL,
    STATUS         NUMBER(1)         NOT NULL,
    CONSTRAINT PK_REVIEW_SEQ PRIMARY KEY (REVIEW_SEQ)
)
/

CREATE SEQUENCE PRODUCT_REVIEW_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PRODUCT_REVIEW_AI_TRG
BEFORE INSERT ON PRODUCT_REVIEW
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT PRODUCT_REVIEW_SEQ.NEXTVAL
    INTO :NEW.REVIEW_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER PRODUCT_REVIEW_AI_TRG;
/

--DROP SEQUENCE PRODUCT_REVIEW_SEQ;
/

COMMENT ON TABLE PRODUCT_REVIEW IS '상품 후기'
/

COMMENT ON COLUMN PRODUCT_REVIEW.REVIEW_SEQ IS '상품 후기 SEQ'
/

COMMENT ON COLUMN PRODUCT_REVIEW.PRODUCT_SEQ IS '상품 SEQ'
/

COMMENT ON COLUMN PRODUCT_REVIEW.USER_ID IS '작성자 ID'
/

COMMENT ON COLUMN PRODUCT_REVIEW.ORDER_SEQ IS '주문 SEQ'
/

COMMENT ON COLUMN PRODUCT_REVIEW.TITLE IS '제목'
/

COMMENT ON COLUMN PRODUCT_REVIEW.CONTENT IS '후기 내용'
/

COMMENT ON COLUMN PRODUCT_REVIEW.IMAGE IS '이미지 파일명'
/

COMMENT ON COLUMN PRODUCT_REVIEW.RATE IS '별점'
/

COMMENT ON COLUMN PRODUCT_REVIEW.WDATE IS '작성일'
/

COMMENT ON COLUMN PRODUCT_REVIEW.DEL IS '삭제'
/

COMMENT ON COLUMN PRODUCT_REVIEW.STATUS IS '답변 상태'
/

ALTER TABLE PRODUCT_REVIEW
    ADD CONSTRAINT FK_PRODUCT_REVIEW_PRODUCT_SEQ_ FOREIGN KEY (PRODUCT_SEQ)
        REFERENCES PRODUCT (PRODUCT_SEQ)
/

ALTER TABLE PRODUCT_REVIEW
    ADD CONSTRAINT FK_PRODUCT_REVIEW_ORDER_SEQ_PR FOREIGN KEY (ORDER_SEQ)
        REFERENCES PRODUCT_ORDER (ORDER_SEQ)
/

ALTER TABLE PRODUCT_REVIEW
    ADD CONSTRAINT FK_PRODUCT_REVIEW_USER_ID_memb FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/


-- PRODUCT_QNA Table Create SQL
CREATE TABLE PRODUCT_QNA
(
    QNA_SEQ        NUMBER(8)         NOT NULL,
    PRODUCT_SEQ    NUMBER(8)         NOT NULL,
    USER_ID        VARCHAR2(100)     NOT NULL,
    TITLE          VARCHAR2(1000)    NOT NULL,
    CONTENT        VARCHAR2(4000)    NOT NULL,
    WDATE          DATE              NOT NULL,
    SECRET         NUMBER(1)         NOT NULL,
    DEL            NUMBER(1)         NOT NULL,
    STATUS         NUMBER(1)         NOT NULL,
    REF            NUMBER(8)         NOT NULL,
    STEP           NUMBER(8)         NOT NULL,
    CONSTRAINT PK_PRODUCT_QNA PRIMARY KEY (QNA_SEQ)
)
/

CREATE SEQUENCE PRODUCT_QNA_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER PRODUCT_QNA_AI_TRG
BEFORE INSERT ON PRODUCT_QNA
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT PRODUCT_QNA_SEQ.NEXTVAL
    INTO :NEW.QNA_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER PRODUCT_QNA_AI_TRG;
/

--DROP SEQUENCE PRODUCT_QNA_SEQ;
/

COMMENT ON TABLE PRODUCT_QNA IS '상품 문의'
/

COMMENT ON COLUMN PRODUCT_QNA.QNA_SEQ IS '상품 QNA SEQ'
/

COMMENT ON COLUMN PRODUCT_QNA.PRODUCT_SEQ IS '상품 SEQ'
/

COMMENT ON COLUMN PRODUCT_QNA.USER_ID IS '작성자 ID'
/

COMMENT ON COLUMN PRODUCT_QNA.TITLE IS '제목'
/

COMMENT ON COLUMN PRODUCT_QNA.CONTENT IS 'QNA 내용'
/

COMMENT ON COLUMN PRODUCT_QNA.WDATE IS '작성일'
/

COMMENT ON COLUMN PRODUCT_QNA.SECRET IS '비밀글 여부'
/

COMMENT ON COLUMN PRODUCT_QNA.DEL IS '삭제'
/

COMMENT ON COLUMN PRODUCT_QNA.STATUS IS '답변 상태'
/

COMMENT ON COLUMN PRODUCT_QNA.REF IS '그룹번호'
/

COMMENT ON COLUMN PRODUCT_QNA.STEP IS 'STEP 0=문의글 1=답변글'
/

ALTER TABLE PRODUCT_QNA
    ADD CONSTRAINT FK_PRODUCT_QNA_PRODUCT_SEQ_PRO FOREIGN KEY (PRODUCT_SEQ)
        REFERENCES PRODUCT (PRODUCT_SEQ)
/

ALTER TABLE PRODUCT_QNA
    ADD CONSTRAINT FK_PRODUCT_QNA_USER_ID_member_ FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/


-- NOTICE_COMMENT Table Create SQL
CREATE TABLE NOTICE_COMMENT
(
    comment_seq    NUMBER(8)         NOT NULL,
    notice_seq     NUMBER(8)         NOT NULL,
    user_id        VARCHAR2(100)     NOT NULL,
    content        VARCHAR2(3000)    NOT NULL,
    ref            NUMBER(8)         NOT NULL,
    step           NUMBER(8)         NOT NULL,
    depth          NUMBER(8)         NOT NULL,
    wdate          DATE              NOT NULL,
    del            NUMBER(1)         NOT NULL,
    CONSTRAINT PK_COMMENT_NOTICE PRIMARY KEY (comment_seq)
)
/

CREATE SEQUENCE NOTICE_COMMENT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER NOTICE_COMMENT_AI_TRG
BEFORE INSERT ON NOTICE_COMMENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT NOTICE_COMMENT_SEQ.NEXTVAL
    INTO :NEW.comment_seq
    FROM DUAL;
END;
/

--DROP TRIGGER NOTICE_COMMENT_AI_TRG;
/

--DROP SEQUENCE NOTICE_COMMENT_SEQ;
/

COMMENT ON TABLE NOTICE_COMMENT IS '공지사항 댓글'
/

COMMENT ON COLUMN NOTICE_COMMENT.comment_seq IS '댓글 SEQ'
/

COMMENT ON COLUMN NOTICE_COMMENT.notice_seq IS '공지사항 SEQ'
/

COMMENT ON COLUMN NOTICE_COMMENT.user_id IS '작성자 ID'
/

COMMENT ON COLUMN NOTICE_COMMENT.content IS '댓글 내용'
/

COMMENT ON COLUMN NOTICE_COMMENT.ref IS '그룹번호'
/

COMMENT ON COLUMN NOTICE_COMMENT.step IS '행번호'
/

COMMENT ON COLUMN NOTICE_COMMENT.depth IS '깊이'
/

COMMENT ON COLUMN NOTICE_COMMENT.wdate IS '작성일'
/

COMMENT ON COLUMN NOTICE_COMMENT.del IS '삭제'
/

ALTER TABLE NOTICE_COMMENT
    ADD CONSTRAINT FK_NOTICE_COMMENT_notice_seq_N FOREIGN KEY (notice_seq)
        REFERENCES NOTICE (notice_seq)
/

ALTER TABLE NOTICE_COMMENT
    ADD CONSTRAINT FK_NOTICE_COMMENT_user_id_memb FOREIGN KEY (user_id)
        REFERENCES member (id)
/


-- QNA Table Create SQL
CREATE TABLE QNA
(
    qna_seq      NUMBER(8)         NOT NULL,
    user_id      VARCHAR2(100)     NOT NULL,
    ref          NUMBER(8)         NOT NULL,
    step         NUMBER(8)         NOT NULL,
    depth        NUMBER(8)         NOT NULL,
    title        VARCHAR2(2000)    NOT NULL,
    content      VARCHAR2(4000)    NOT NULL,
    wdate        DATE              NOT NULL,
    readcount    NUMBER(8)         NOT NULL,
    status       NUMBER(1)         NOT NULL,
    secret       NUMBER(1)         NOT NULL,
    del          NUMBER(1)         NOT NULL,
    CONSTRAINT PK_QNA PRIMARY KEY (qna_seq)
)
/

CREATE SEQUENCE QNA_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER QNA_AI_TRG
BEFORE INSERT ON QNA
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT QNA_SEQ.NEXTVAL
    INTO :NEW.qna_seq
    FROM DUAL;
END;
/

--DROP TRIGGER QNA_AI_TRG;
/

--DROP SEQUENCE QNA_SEQ;
/

COMMENT ON TABLE QNA IS 'QnA게시판'
/

COMMENT ON COLUMN QNA.qna_seq IS 'QNA게시판 SEQ'
/

COMMENT ON COLUMN QNA.user_id IS '작성자 ID'
/

COMMENT ON COLUMN QNA.ref IS '그룹번호'
/

COMMENT ON COLUMN QNA.step IS '행번호'
/

COMMENT ON COLUMN QNA.depth IS '깊이'
/

COMMENT ON COLUMN QNA.title IS 'QNA게시판 제목'
/

COMMENT ON COLUMN QNA.content IS 'QNA게시판 내용'
/

COMMENT ON COLUMN QNA.wdate IS '작성일'
/

COMMENT ON COLUMN QNA.readcount IS '조회수'
/

COMMENT ON COLUMN QNA.status IS '상태'
/

COMMENT ON COLUMN QNA.secret IS 'QNA게시판 비밀글 여부'
/

COMMENT ON COLUMN QNA.del IS '삭제'
/

ALTER TABLE QNA
    ADD CONSTRAINT FK_QNA_user_id_member_id FOREIGN KEY (user_id)
        REFERENCES member (id)
/


-- CAMPING_IMG Table Create SQL
CREATE TABLE CAMPING_IMG
(
    SERIALNUM    NUMBER(38)        NOT NULL,
    CONTENTID    NUMBER(38)        NOT NULL,
    IMAGEURL     VARCHAR2(4000)    NOT NULL,
    CONSTRAINT PK_CAMPING_IMG PRIMARY KEY (SERIALNUM)
)
/

COMMENT ON TABLE CAMPING_IMG IS '캠핑 이미지'
/

COMMENT ON COLUMN CAMPING_IMG.SERIALNUM IS '캠핑장 시리얼넘버'
/

COMMENT ON COLUMN CAMPING_IMG.CONTENTID IS '캠핑장 고유번호'
/

COMMENT ON COLUMN CAMPING_IMG.IMAGEURL IS '이미지주소'
/

ALTER TABLE CAMPING_IMG
    ADD CONSTRAINT FK_CAMPING_IMG_CONTENTID_CAMPI FOREIGN KEY (CONTENTID)
        REFERENCES CAMPING_LIST (CONTENTID)
/


-- COMMUNITY_BBS_COMMENT Table Create SQL
CREATE TABLE COMMUNITY_BBS_COMMENT
(
    COMMENT_SEQ      NUMBER(8)         NOT NULL,
    USER_ID          VARCHAR2(100)     NOT NULL,
    CONTENT          VARCHAR2(3000)    NOT NULL,
    WDATE            DATE              NOT NULL,
    DEL              NUMBER(1)         NOT NULL,
    COMMUNITY_SEQ    NUMBER(8)         NOT NULL,
    REF              NUMBER(8)         NOT NULL,
    STEP             NUMBER(8)         NOT NULL,
    DEPTH            NUMBER(8)         NOT NULL,
    CONSTRAINT PK_COMMENT_SEQ PRIMARY KEY (COMMENT_SEQ)
)
/

CREATE SEQUENCE COMMUNITY_BBS_COMMENT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER COMMUNITY_BBS_COMMENT_AI_TRG
BEFORE INSERT ON COMMUNITY_BBS_COMMENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT COMMUNITY_BBS_COMMENT_SEQ.NEXTVAL
    INTO :NEW.COMMENT_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER COMMUNITY_BBS_COMMENT_AI_TRG;
/

--DROP SEQUENCE COMMUNITY_BBS_COMMENT_SEQ;
/

COMMENT ON TABLE COMMUNITY_BBS_COMMENT IS '자유게시판_댓글'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.COMMENT_SEQ IS '글  댓글 번호'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.USER_ID IS '작성자 ID'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.CONTENT IS '내용'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.WDATE IS '작성일자'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.DEL IS '삭제'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.COMMUNITY_SEQ IS '글 번호'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.REF IS '그룹번호'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.STEP IS '행번호'
/

COMMENT ON COLUMN COMMUNITY_BBS_COMMENT.DEPTH IS '깊이'
/

ALTER TABLE COMMUNITY_BBS_COMMENT
    ADD CONSTRAINT FK_COMMUNITY_BBS_COMMENT_COMMU FOREIGN KEY (COMMUNITY_SEQ)
        REFERENCES COMMUNITY_BBS (COMMUNITY_SEQ)
/

ALTER TABLE COMMUNITY_BBS_COMMENT
    ADD CONSTRAINT FK_COMMUNITY_BBS_COMMENT_USER_ FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/


-- CAMPING_LIKE Table Create SQL
CREATE TABLE CAMPING_LIKE
(
    LIKE_AUTO_SEQ    NUMBER(8)        NOT NULL,
    CONTENTID        NUMBER(38)       NOT NULL,
    USER_ID          VARCHAR2(100)    NOT NULL,
    CONTENT_TYPE     NUMBER(8)        NOT NULL,
    REVIEW_SEQ       NUMBER(8)        NOT NULL,
    COMMENT_SEQ      NUMBER(8)        NOT NULL,
    CONSTRAINT PK_CAMPING_BBS_LIKE PRIMARY KEY (LIKE_AUTO_SEQ)
)
/

CREATE SEQUENCE CAMPING_LIKE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER CAMPING_LIKE_AI_TRG
BEFORE INSERT ON CAMPING_LIKE
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT CAMPING_LIKE_SEQ.NEXTVAL
    INTO :NEW.LIKE_AUTO_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER CAMPING_LIKE_AI_TRG;
/

--DROP SEQUENCE CAMPING_LIKE_SEQ;
/

COMMENT ON COLUMN CAMPING_LIKE.LIKE_AUTO_SEQ IS '추천 시퀀스'
/

COMMENT ON COLUMN CAMPING_LIKE.CONTENTID IS '고유번호'
/

COMMENT ON COLUMN CAMPING_LIKE.USER_ID IS '좋아한 사람'
/

COMMENT ON COLUMN CAMPING_LIKE.CONTENT_TYPE IS '글의 종류'
/

COMMENT ON COLUMN CAMPING_LIKE.REVIEW_SEQ IS '리뷰 번호'
/

COMMENT ON COLUMN CAMPING_LIKE.COMMENT_SEQ IS '댓긃 번호'
/

ALTER TABLE CAMPING_LIKE
    ADD CONSTRAINT FK_CAMPING_LIKE_USER_ID_member FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/

ALTER TABLE CAMPING_LIKE
    ADD CONSTRAINT FK_CAMPING_LIKE_CONTENTID_CAMP FOREIGN KEY (CONTENTID)
        REFERENCES CAMPING_LIST (CONTENTID)
/


-- COMMUNITY_BBS_LIKE Table Create SQL
CREATE TABLE COMMUNITY_BBS_LIKE
(
    COMMUNITY_LIKE_SEQ    NUMBER(8)        NOT NULL,
    COMMUNITY_SEQ         NUMBER(8)        NOT NULL,
    USER_ID               VARCHAR2(100)    NOT NULL,
    CONSTRAINT PK_CAMPING_BBS_LIKE PRIMARY KEY (COMMUNITY_LIKE_SEQ)
)
/

CREATE SEQUENCE COMMUNITY_BBS_LIKE_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER COMMUNITY_BBS_LIKE_AI_TRG
BEFORE INSERT ON COMMUNITY_BBS_LIKE
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT COMMUNITY_BBS_LIKE_SEQ.NEXTVAL
    INTO :NEW.COMMUNITY_LIKE_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER COMMUNITY_BBS_LIKE_AI_TRG;
/

--DROP SEQUENCE COMMUNITY_BBS_LIKE_SEQ;
/

COMMENT ON COLUMN COMMUNITY_BBS_LIKE.COMMUNITY_LIKE_SEQ IS '추천 시퀀스'
/

COMMENT ON COLUMN COMMUNITY_BBS_LIKE.COMMUNITY_SEQ IS '게시글 시퀀스'
/

COMMENT ON COLUMN COMMUNITY_BBS_LIKE.USER_ID IS '좋아한 사람'
/

ALTER TABLE COMMUNITY_BBS_LIKE
    ADD CONSTRAINT FK_COMMUNITY_BBS_LIKE_COMMUNIT FOREIGN KEY (COMMUNITY_SEQ)
        REFERENCES COMMUNITY_BBS (COMMUNITY_SEQ)
/

ALTER TABLE COMMUNITY_BBS_LIKE
    ADD CONSTRAINT FK_COMMUNITY_BBS_LIKE_USER_ID_ FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/


-- CAMPING_DETAIL Table Create SQL
CREATE TABLE CAMPING_DETAIL
(
    CONTENTID            NUMBER(38)        NOT NULL,
    MAPX                 VARCHAR2(38)      NOT NULL,
    MAPY                 VARCHAR2(38)      NOT NULL,
    GNRLSITECO           NUMBER(38)        NOT NULL,
    AUTOSITECO           NUMBER(38)        NOT NULL,
    GLAMPSITECO          NUMBER(38)        NOT NULL,
    CARAVSITECO          NUMBER(38)        NOT NULL,
    INDVDLCARAVSITECO    NUMBER(38)        NOT NULL,
    SITEDSTNC            NUMBER(38)        NOT NULL,
    SITEMG1WIDTH         NUMBER(38)        NOT NULL,
    SITEMG1VRTICL        NUMBER(38)        NOT NULL,
    SITEMG1CO            NUMBER(38)        NOT NULL,
    SITEMG2WIDTH         NUMBER(38)        NOT NULL,
    SITEMG2VRTICL        NUMBER(38)        NOT NULL,
    SITEMG2CO            NUMBER(38)        NOT NULL,
    RESVEURL             VARCHAR2(4000)    NOT NULL,
    OPERPDCL             VARCHAR2(26)      NOT NULL,
    OPERDECL             VARCHAR2(26)      NOT NULL,
    TRLERACMPNYAT        VARCHAR2(26)      NOT NULL,
    CONSTRAINT PK_CAMPING_DETAIL PRIMARY KEY (CONTENTID)
)
/

COMMENT ON TABLE CAMPING_DETAIL IS '캠핑장 디테일 화면'
/

COMMENT ON COLUMN CAMPING_DETAIL.CONTENTID IS '캠핑장 고유번호'
/

COMMENT ON COLUMN CAMPING_DETAIL.MAPX IS '경도'
/

COMMENT ON COLUMN CAMPING_DETAIL.MAPY IS '위도'
/

COMMENT ON COLUMN CAMPING_DETAIL.GNRLSITECO IS '일반야영장'
/

COMMENT ON COLUMN CAMPING_DETAIL.AUTOSITECO IS '자동차야영장'
/

COMMENT ON COLUMN CAMPING_DETAIL.GLAMPSITECO IS '글램핑야영장'
/

COMMENT ON COLUMN CAMPING_DETAIL.CARAVSITECO IS '카라반야영장'
/

COMMENT ON COLUMN CAMPING_DETAIL.INDVDLCARAVSITECO IS '개인카라반야영장'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEDSTNC IS '사이트 간 거리'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEMG1WIDTH IS '사이트1넓이'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEMG1VRTICL IS '사이트1높이'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEMG1CO IS '사이트1수량'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEMG2WIDTH IS '사이트2넓이'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEMG2VRTICL IS '사이트2높이'
/

COMMENT ON COLUMN CAMPING_DETAIL.SITEMG2CO IS '사이트2수량'
/

COMMENT ON COLUMN CAMPING_DETAIL.RESVEURL IS '예약 홈페이지'
/

COMMENT ON COLUMN CAMPING_DETAIL.OPERPDCL IS '운영기간'
/

COMMENT ON COLUMN CAMPING_DETAIL.OPERDECL IS '운영일'
/

COMMENT ON COLUMN CAMPING_DETAIL.TRLERACMPNYAT IS '개인트레일러 사용 여부'
/

ALTER TABLE CAMPING_DETAIL
    ADD CONSTRAINT FK_CAMPING_DETAIL_CONTENTID_CA FOREIGN KEY (CONTENTID)
        REFERENCES CAMPING_LIST (CONTENTID)
/


-- CAMPING_BBS_COMMENT Table Create SQL
CREATE TABLE CAMPING_BBS_COMMENT
(
    COMMENT_SEQ    NUMBER(8)         NOT NULL,
    REVIEW_SEQ     NUMBER(8)         NOT NULL,
    USER_ID        VARCHAR2(100)     NOT NULL,
    CONTENT        VARCHAR2(4000)    NOT NULL,
    WDATE          DATE              NOT NULL,
    REF            NUMBER(8)         NOT NULL,
    STEP           NUMBER(8)         NOT NULL,
    DEPTH          NUMBER(8)         NOT NULL,
    NICKNAME       VARCHAR2(20)      NOT NULL,
    CONSTRAINT PK_CAMPING_BBS_COMMENT PRIMARY KEY (COMMENT_SEQ)
)
/

CREATE SEQUENCE CAMPING_BBS_COMMENT_SEQ
START WITH 1
INCREMENT BY 1;
/

CREATE OR REPLACE TRIGGER CAMPING_BBS_COMMENT_AI_TRG
BEFORE INSERT ON CAMPING_BBS_COMMENT
REFERENCING NEW AS NEW FOR EACH ROW
BEGIN
    SELECT CAMPING_BBS_COMMENT_SEQ.NEXTVAL
    INTO :NEW.COMMENT_SEQ
    FROM DUAL;
END;
/

--DROP TRIGGER CAMPING_BBS_COMMENT_AI_TRG;
/

--DROP SEQUENCE CAMPING_BBS_COMMENT_SEQ;
/

COMMENT ON TABLE CAMPING_BBS_COMMENT IS '캠핑후기게시판_댓글'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.COMMENT_SEQ IS '댓글 시퀀스'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.REVIEW_SEQ IS '리뷰 시퀀스'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.USER_ID IS '작성자 ID'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.CONTENT IS '댓글 내용'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.WDATE IS '작성일'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.REF IS '대댓글용 REF'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.STEP IS '대댓글용 STEP'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.DEPTH IS '대대댓글용 DEPTH'
/

COMMENT ON COLUMN CAMPING_BBS_COMMENT.NICKNAME IS '닉네임'
/

ALTER TABLE CAMPING_BBS_COMMENT
    ADD CONSTRAINT FK_CAMPING_BBS_COMMENT_REVIEW_ FOREIGN KEY (REVIEW_SEQ)
        REFERENCES CAMPING_BBS (REVIEW_SEQ)
/

ALTER TABLE CAMPING_BBS_COMMENT
    ADD CONSTRAINT FK_CAMPING_BBS_COMMENT_USER_ID FOREIGN KEY (USER_ID)
        REFERENCES member (id)
/


-- CAMPING_INTRO Table Create SQL
CREATE TABLE CAMPING_INTRO
(
    CONTENTID    NUMBER(38)        NOT NULL,
    INTRO        VARCHAR2(4000)    NOT NULL,
    CONSTRAINT PK_CAMPING_INTRO PRIMARY KEY (CONTENTID)
)
/

COMMENT ON TABLE CAMPING_INTRO IS '캠핑장 소개'
/

COMMENT ON COLUMN CAMPING_INTRO.CONTENTID IS '캠핑장 고유번호'
/

COMMENT ON COLUMN CAMPING_INTRO.INTRO IS '소개'
/

ALTER TABLE CAMPING_INTRO
    ADD CONSTRAINT FK_CAMPING_INTRO_CONTENTID_CAM FOREIGN KEY (CONTENTID)
        REFERENCES CAMPING_LIST (CONTENTID)
/

